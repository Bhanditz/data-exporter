<?php

namespace Php;

class Session {

	/**
	 * @var {int}
	 * number of seconds before garbage collection <b>may</b> intiate. when set 0,
	 * the default, the setting is ignored.
	 *
	 * session.gc_maxlifetime specifies the number of seconds after which data
	 * will be seen as 'garbage' and <b>potentially</b> cleaned up. Garbage collection
	 * may occur during session start (depending on session.gc_probability and
	 * session.gc_divisor).
	 *
	 * Note: If different scripts have different values of session.gc_maxlifetime but
	 * share the same place for storing the session data then the script with
	 * the minimum value will be cleaning the data. In this case, use this
	 * directive together with session.save_path.
	 *
	 * @link http://www.php.net/manual/en/session.configuration.php#ini.session.gc-maxlifetime
	 */
	protected $_gc_maxlifetime;

	/**
	 * @var {int}
	 * number of seconds allowed before session times out. when set 0,
	 * the default, the setting is ignored.
	 *
	 * This provides a back-up method in case Garbage collection does not occur.
	 * Session name is regenerated by removing the session_name() cookie instead
	 * of using session_regenerate_id() which preserves session information.
	 *
	 * @link http://stackoverflow.com/questions/520237/how-do-i-expire-a-php-session-after-30-minutes
	 * @link http://www.owasp.org/index.php/Session_fixation
	 */
	protected $_session_timeout;

	/**
	 * @var {timestamp}
	 */
	public $last_activity;


	/**
	 * @param {array} $options
	 */
	public function __construct( array $options = array() ) {
		$this->init();
		$this->populate( $options );
	}

	public function cookiePresent() {
		return !empty( $_COOKIE['PHPSESSID'] );
	}

	/**
	 * @param {string} $key
	 * @return {string}
	 */
	public function getValue( $key ) {
		$result = '';
		$key = filter_var( $key, FILTER_SANITIZE_STRING );

		if ( !empty( $_SESSION[ $key ] ) ) {
			$result = filter_var( $_SESSION[ $key ], FILTER_SANITIZE_STRING );
		}

		return $result;
	}

  public function init() {
		$this->last_activity = 0;
		$this->_gc_maxlifetime = 0; // 60 seconds * n minutes, e.g. 60 * 30 = 30 minutes
		$this->_session_timeout = 0; // 60 seconds * n minutes, e.g. 60 * 30 = 30 minutes
  }

	/**
	 * @param {array} $options
	 * @param {int} $options['gc-maxlifetime']
	 * @param {int} $options['session-timeout']
	 */
	protected function populate( array $options = array() ) {
		if ( isset( $options['gc-maxlifetime'] ) && is_int( $options['gc-maxlifetime'] ) ) {
			$this->_gc_maxlifetime = $options['gc-maxlifetime'];
		}

		if ( isset( $options['session-timeout'] ) && is_int( $options['session-timeout'] ) ) {
			$this->_session_timeout = $options['session-timeout'];
		}
	}

  public function sessionStart() {
		if ( $this->_gc_maxlifetime > 0 ) {
			ini_set ( 'session.gc-maxlifetime', $this->_gc_maxlifetime );
		}

		session_start();

		if ( $this->_session_timeout > 0 ) {
			$this->setLastActivity();
			$this->sessionTimeoutCheck();
		}
	}

  protected function sessionTimeoutCheck() {
		if ( $this->_session_timeout <= 0 ) {
			return;
		}

    if (
			!empty( $this->last_activity ) &&
			time() - $this->last_activity > $this->_session_timeout
		) {
      $this->timeoutSession();
		}
  }

	/**
	 * @param {string} $key
	 * @param {string} $value
	 */
	public function setValue( $key, $value ) {
		$_SESSION[ filter_var( $key, FILTER_SANITIZE_STRING ) ] =
			filter_var( $value, FILTER_SANITIZE_STRING );
	}

	/**
	 * $this->last_activity is used to determine whether or not to timeout the
	 * session. this method sets the class variable $this->last_activity to the
	 * session value if it exists and then updates the session value with
	 * this moment in time.
	 */
	protected function setLastActivity() {
		if ( !empty( $_SESSION['last_activity'] ) ) {
			$this->last_activity = filter_var( $_SESSION['last_activity'], FILTER_SANITIZE_STRING );
		}

		$_SESSION['last_activity'] = time();
	}

	public function timeoutSession() {
		if ( isset( $_COOKIE[ session_name() ] ) ) {
			setcookie(
					session_name(),
					'',
					time() - 42000,
					'/'
			);
		}

		session_unset();
		session_destroy();
	}
}
